"""
    low = [0] * len(fields)
    high = [1] * len(fields)

    # Create the radar chart
    radar = Radar(fields, low, high,
                  num_rings=4, 
                  ring_width=1, 
                  center_circle_radius=1)

    fig, axs = grid(figheight=14, grid_height=0.875, title_height=0.1, endnote_height=0.025,
                title_space=0, endnote_space=0, grid_key='radar', axis=False)

    # plot the radar
    radar.setup_axis(ax=axs['radar'], facecolor='#2B2B2B')
    rings_inner = radar.draw_circles(ax=axs['radar'], facecolor='#2B2B2B', edgecolor='white', alpha=0.4, lw=1.5)
    radar_output = radar.draw_radar(data, ax=axs['radar'],
                                    kwargs_radar={'facecolor': '#d0667a'},
                                    kwargs_rings={'facecolor': '#1d537f'})
    radar_poly, rings_outer, vertices = radar_output
    #range_labels = radar.draw_range_labels(ax=axs['radar'], fontsize=25, color='#fcfcfc')
    #param_labels = radar.draw_param_labels(ax=axs['radar'], fontsize=25, color='#fcfcfc')
    col_labels = radar.draw_param_labels(ax=axs['radar'],color="white", fontsize=18, fontname = 'Sans Serif')

    rot = 360
    for i in range(len(vertices)):
        rot = round(360-((360/len(cols))*i),0)
        if rot in range(90, 270):
            rot = rot - 180 

        x,y = vertices[i]
        val = data[i]
        axs['radar'].annotate(xy = (x,y), text = val, rotation=rot,
                              bbox=dict(facecolor= '#d0667a', edgecolor='white', boxstyle='round', alpha=1), 
                              color='white', fontname = 'Sans Serif', fontsize = 15)

    # adding the endnote and title text (these axes range from 0-1, i.e. 0, 0 is the bottom left)
    # Note we are slightly offsetting the text from the edges by 0.01 (1%, e.g. 0.99)
    endnote_text = axs['endnote'].text(0.99, 0.5, 'Created By @wael_hcin',
                                    color='#fcfcfc',
                                    fontsize=15, ha='right', va='center')
    title1_text = axs['title'].text(0.01, 0.65, name, fontsize=25,
                                    ha='left', va='center', color='#e4dded')
    title2_text = axs['title'].text(0.01, 0.25, 'Manchester United', fontsize=20,
                                    ha='left', va='center', color='#cc2a3f')
    title3_text = axs['title'].text(0.99, 0.65, 'Radar Chart', fontsize=25,
                                    ha='right', va='center', color='#e4dded')
    title4_text = axs['title'].text(0.99, 0.25, element_type, fontsize=20,
                                    ha='right', va='center', color='#cc2a3f')

    fig.set_facecolor('#121212')

    return fig
"""




X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Initialize the XGBoost regressor
xgb_model = XGBRegressor(
    objective='reg:squarederror',
    n_estimators=500,
    learning_rate=0.1,
    max_depth=3,
    min_child_weight=3,
    subsample= 0.8,
    colsample_bytree=0.8,
    gamma=0.1,
    alpha=0,
    random_state=42
)

# Train the model
xgb_model.fit(
    X_train, y_train,
    eval_set=[(X_test, y_test)],
    verbose=False  # Set to True if you want to see logs
)

# Make predictions
y_pred = xgb_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')





















# 1. Position Weights
position_weights = {
    'GKP': 2.0,  # GKP is important for clean sheets and saves
    'DEF': 2.3,  # Defenders get points for goals, clean sheets
    'MID': 1.5,  # Midfielders are critical for goals, assists, and xGI
    'FWD': 1.8   # Forwards tend to score more points for goals
}

X_weighted['position_weight'] = X_weighted['Pos'].map(position_weights)

# 2. Home/Away Game Weights
home_weight = 2.5  # Home game weight
away_weight = 1.0  # Away game weight
X_weighted['home_away_weight'] = X_weighted['was_home'].map({True: home_weight, False: away_weight})

X_weighted['kickoff_time'] = pd.to_datetime(X_weighted['kickoff_time'])

# Then, you can apply the time weight function
def assign_time_weight(kickoff_time):
    if 6 <= kickoff_time.day < 7:
        return 2.5  # Morning games tend to have lower energy
    elif 12 <= kickoff_time.day < 30:
        return 2  # Standard midday games
    elif 18 <= kickoff_time.day < 60:
        return 0.9  # Evening games often see more action
    else:
        return 0.5 # Late-night games may see more relaxed performances
    

# Apply the function to 'kickoff_time'
X_weighted['time_weight'] = X_weighted['kickoff_time'].apply(assign_time_weight)

# 4. Team and Opponent Strength Weights
X_weighted['team_strength_weight'] = (
    X_weighted['strength_overall_home'] + X_weighted['strength_attack_home'] - X_weighted['strength_defence_home']
) * 1.1

X_weighted['opponent_strength_weight'] = (
    X_weighted['strength_overall_away_opponent'] + X_weighted['strength_attack_away_opponent'] - X_weighted['strength_defence_away_opponent']
)

X_weighted['strength_weight'] = X_weighted['team_strength_weight'] / X_weighted['opponent_strength_weight']

# 5. Transfer Activity Weights
X_weighted['transfer_weight'] = X_weighted['Tran_In'] / (X_weighted['Tran_In'] + X_weighted['Tran_Out'] + 1)

# 6. Disciplinary Risk Weights
X_weighted['penalty_risk_weight'] = 1 - (X_weighted['Pen_Miss'] * 0.3 + X_weighted['YC'] * 0.1 + X_weighted['RC'] * 0.2)

# 7. Fixture Difficulty Rating (FDR) Weights
X_weighted['opponent_difficulty_weight'] = 1 / (X_weighted['opponent_fdr'] + 1)

# 8. SB (Selected By) Weights
X_weighted['sb_weight'] = X_weighted['SB'] / X_weighted['SB'].max()

# 9. ICT (Influence, Creativity, and Threat Index) Weights
X_weighted['ict_weight'] = X_weighted['ICT'] / X_weighted['ICT'].max()

# 10. Final Weight Calculation
X_weighted['final_weight'] = (
    X_weighted['position_weight'] * 
    X_weighted['home_away_weight'] * 
    X_weighted['time_weight'] * 
    X_weighted['strength_weight'] * 
    X_weighted['transfer_weight'] * 
    X_weighted['penalty_risk_weight'] * 
    X_weighted['opponent_difficulty_weight'] *
    X_weighted['sb_weight'] *
    X_weighted['ict_weight']   
)

